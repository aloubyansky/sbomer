#
# JBoss, Home of Professional Open Source.
# Copyright 2023 Red Hat, Inc., and individual contributors
# as indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sbomer-generate-cyclonedx
spec:
  params:
    # TODO: Currently that JSON is not really easy to work with in a Bash script, but this will change once we move to a proper CLI.
    - name: config
      type: string
      description: |
        Additional parameters that instrument the CycloneDX plugin in th JSON format:

        Currently only following keys are supported:

          * version:            Version of the Maven CycloneDX plugin, default: 2.7.5
          * additional-args:    Additional arguments passed to the Maven CycloneDX plugin invocation

        Example: 

        {"version": "2.7.5", "additional-args": "--batch-mode --no-transfer-progress --quiet"}
      default: |
        {"version": "2.7.5", "additional-args": "--batch-mode --no-transfer-progress --quiet"}


    # TODO: Content available below is not supported in the Tekton version we use.
    # For more information please refer to this TEP: https://github.com/tektoncd/community/blob/main/teps/0075-object-param-and-result-types.md

    # - name: config
    #   type: object
    #   description: |
    #     Additional parameters that instrument the CycloneDX plugin, available options:

    #     * version:            Version of the Maven CycloneDX plugin, default: 2.7.5
    #     * additional-args:    Additional arguments passed to the Maven CycloneDX plugin invocation
    #   properties:
    #     version:
    #      type: string
    #     additional-args:
    #      type: string
    #   default:
    #     version: "2.7.5"
    #     additional-args: "--batch-mode --no-transfer-progress --quiet"
    - name: build-id
      type: string
      description: "The PNC build ID"
  steps:
    # TODO: Move implementation of this step into Java CLI
    - name: checkout
      image: sbomer-generator
      imagePullPolicy: IfNotPresent
      script: |
        #!/usr/bin/env bash

        set -e

        # Fetch build information
        curl https://orch.psi.redhat.com/pnc-rest/v2/builds/$(params.build-id) | jq > $(workspaces.data.path)/build.json

        # Get information on what to clone
        SCM_URL=$(cat $(workspaces.data.path)/build.json | jq --raw-output '.scmUrl')
        SCM_TAG=$(cat $(workspaces.data.path)/build.json | jq --raw-output '.scmTag')

        # Clone everything into 'source' directory
        git clone --depth 1 --branch $SCM_TAG $SCM_URL $(workspaces.data.path)/source
    # TODO: Move implementation of this step into Java CLI
    # TODO: What with other build tools, like Gradle? Should it be covered here or a new Task should be prepared?
    - name: generate
      image: sbomer-generator
      imagePullPolicy: IfNotPresent
      script: |
        #!/usr/bin/env bash

        set -e

        source ~/.sdkman/bin/sdkman-init.sh

        JDK_VERSION=$(cat $(workspaces.data.path)/build.json | jq --raw-output '.environment.attributes.JDK | split(".")[0]')
        MAVEN_VERSION=$(cat $(workspaces.data.path)/build.json | jq --raw-output '.environment.attributes.MAVEN | split(".") | .[0] + "." + .[1]')

        if [ "$JDK_VERSION" = "1" ]; then
          JDK_VERSION="8"
        fi

        echo "Java version: ${JDK_VERSION}"
        echo "Maven version: ${MAVEN_VERSION}"

        sdk use maven $MAVEN_VERSION
        sdk use java $JDK_VERSION

        BOM_PATH="$(workspaces.data.path)/source/target/bom.json"

        cd $(workspaces.data.path)/source

        echo "Working from the `pwd` directory"

        echo "Running with following config:"
        echo '$(params.config)' | tee config.json

        TOOL_VERSION=$(cat config.json | jq --raw-output '.version')
        TOOL_ADDITIONAL_ARGS=$(cat config.json | jq --raw-output '."additional-args"')

        echo "Running SBOM generation with CycloneDX Maven plugin ${TOOL_VERSION}..."
        mvn org.cyclonedx:cyclonedx-maven-plugin:${TOOL_VERSION}:makeAggregateBom -DoutputFormat=json -DoutputName=bom --settings ~/settings.xml ${TOOL_ADDITIONAL_ARGS}

        cat ${BOM_PATH}

        echo "Done, SBOM generated at: ${BOM_PATH}"
    - name: "publish"
      image: sbomer-generator
      imagePullPolicy: IfNotPresent
      env:
        - name: SBOMER_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: sbomer-tekton
              key: SBOMER_SERVICE_URL
      script: |
        #!/usr/bin/env bash

        set -e

        jq -s '{buildId: "$(params.build-id)", type: "BUILD_TIME", generator: "CYCLONEDX", sbom: .[0]}' $(workspaces.data.path)/source/target/bom.json > $(workspaces.data.path)/payload.json

        [[ -z "${SBOMER_SERVICE_URL}" ]] && SBOMER_SERVICE_URL="http://${SBOMER_SERVICE_HOST}:${SBOMER_SERVICE_PORT}"

        # TODO: Why do we send it to the /enrich endpoint? We should just save it and make the service decide what to do with it later (if at all). Leaving for now.
        curl -vX POST -H "Content-Type: application/json" -d @$(workspaces.data.path)/payload.json ${SBOMER_SERVICE_URL}/api/v1alpha1/sboms/enrich


  workspaces:
    - name: data