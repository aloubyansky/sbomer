default:
  tags: [docker]

ensure-images:
  image:
    name: registry.access.redhat.com/ubi9@sha256:fc300be6adbdf2ca812ad01efd0dee2a3e3f5d33958ad6cd99159e25e9ee1398
    entrypoint: [""]
  stage: .pre
  resource_group: deploy
  timeout: 10m
  script:
    - dnf install -y --setopt=tsflags=nodocs skopeo
    - |
      function wait_for_image() {
        if ! skopeo inspect --creds "${QUAY_CREDS_STAGE}" "docker://${IMAGE_REGISTRY_STAGE}/${1}:${CI_COMMIT_SHORT_SHA}" > "image-manifest-${1}.json"; then
          sleep 30
        fi
      }

      for image in "sbomer-service" "sbomer-cache" "sbomer-generator"; do
        wait_for_image "${image}"
      done
  artifacts:
    name: image-manifests
    paths:
      - image-manifest-*.json

deploy-stage:
  stage: deploy
  resource_group: deploy
  image:
    name: alpine/helm:3.14.0
    entrypoint: [""]
  script:
    - curl -L https://certs.corp.redhat.com/certs/2022-IT-Root-CA.pem -o /usr/local/share/ca-certificates/2022-IT-Root-CA.pem
    - curl -L https://certs.corp.redhat.com/certs/2015-IT-Root-CA.pem -o /usr/local/share/ca-certificates/2015-IT-Root-CA.pem
    - curl -L https://certs.corp.redhat.com/chains/rhcs-ca-chain-2022-cross-signed-2015.crt -o /usr/local/share/ca-certificates/rhcs-ca-chain-2022-cross-signed-2015.crt
    - update-ca-certificates
    - helm --kubeconfig $KUBECONFIG --kube-context sbomer-stage get manifest sbomer > manifest-stage-prev.yaml || true
    #- helm --kube-context sbomer-stage upgrade --install --wait --timeout 5m0s --set generator.image.tag=${CI_COMMIT_SHORT_SHA} --set cache.image.tag=${CI_COMMIT_SHORT_SHA} --set service.image.tag=${CI_COMMIT_SHORT_SHA} --values https://gitlab.cee.redhat.com/project-ncl/sbomer-support/-/raw/main/helm/stage.yaml --values ./code/helm/env/stage.yaml sbomer ./code/helm
  artifacts:
    name: manifests
    when: always
    paths:
      - manifest-stage-prev.yaml
  needs:
    - job: ensure-images
  only: [main]

promote:
  image:
    name: registry.access.redhat.com/ubi9@sha256:fc300be6adbdf2ca812ad01efd0dee2a3e3f5d33958ad6cd99159e25e9ee1398
    entrypoint: [""]
  stage: deploy
  when: manual
  resource_group: deploy
  script:
    - dnf install -y --setopt=tsflags=nodocs skopeo
    - skopeo copy --src-creds "${QUAY_CREDS_STAGE}" --dest-creds "${QUAY_CREDS_PROD}" "docker://${IMAGE_REGISTRY_STAGE}/sbomer-cache:${CI_COMMIT_SHORT_SHA}" "docker://${IMAGE_REGISTRY_PROD}/sbomer-cache:${CI_COMMIT_SHORT_SHA}"
    - skopeo copy --src-creds "${QUAY_CREDS_STAGE}" --dest-creds "${QUAY_CREDS_PROD}" "docker://${IMAGE_REGISTRY_STAGE}/sbomer-service:${CI_COMMIT_SHORT_SHA}" "docker://${IMAGE_REGISTRY_PROD}/sbomer-service:${CI_COMMIT_SHORT_SHA}"
    - skopeo copy --src-creds "${QUAY_CREDS_STAGE}" --dest-creds "${QUAY_CREDS_PROD}" "docker://${IMAGE_REGISTRY_STAGE}/sbomer-generator:${CI_COMMIT_SHORT_SHA}" "docker://${IMAGE_REGISTRY_PROD}/sbomer-generator:${CI_COMMIT_SHORT_SHA}"
  needs:
    - job: deploy-stage
  only: [main]

deploy-prod:
  stage: deploy
  resource_group: deploy
  image:
    name: alpine/helm:3.14.0
    entrypoint: [""]
  script:
    - curl -L https://certs.corp.redhat.com/certs/2022-IT-Root-CA.pem -o /usr/local/share/ca-certificates/2022-IT-Root-CA.pem
    - curl -L https://certs.corp.redhat.com/certs/2015-IT-Root-CA.pem -o /usr/local/share/ca-certificates/2015-IT-Root-CA.pem
    - curl -L https://certs.corp.redhat.com/chains/rhcs-ca-chain-2022-cross-signed-2015.crt -o /usr/local/share/ca-certificates/rhcs-ca-chain-2022-cross-signed-2015.crt
    - update-ca-certificates
    - helm --kubeconfig $KUBECONFIG --kube-context sbomer-prod get manifest sbomer > manifest-prod-prev || true
    #- helm --kube-context sbomer-prod upgrade --install --wait --timeout 5m0s --set generator.image.tag=${CI_COMMIT_SHORT_SHA} --set cache.image.tag=${CI_COMMIT_SHORT_SHA} --set service.image.tag=${CI_COMMIT_SHORT_SHA} --values https://gitlab.cee.redhat.com/project-ncl/sbomer-support/-/raw/main/helm/stage.yaml --values ./code/helm/env/stage.yaml sbomer ./code/helm
  artifacts:
    name: manifests
    when: always
    paths:
      - manifest-prod-prev.yaml
  needs:
    - job: promote
  only: [main]

pages:
  image:
    name: registry.access.redhat.com/ubi9@sha256:fc300be6adbdf2ca812ad01efd0dee2a3e3f5d33958ad6cd99159e25e9ee1398
    entrypoint: [""]
  stage: deploy
  script:
    - dnf install -y --setopt=tsflags=nodocs make gcc-c++
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
    - nvm install v18
    - npm install --global yarn
    - yarn install --frozen-lockfile --no-progress
    - >
      NODE_TLS_REJECT_UNAUTHORIZED=0
      npx antora --fetch --to-dir public antora-playbook.yml
  artifacts:
    paths:
      - public
  only: [main]
